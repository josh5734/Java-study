# ## If문, try/catch문은 무엇이 다른가?



### 들어가면서

* if 조건문을 쓰는 이유는 무엇인가?
* try/catch문을 쓰는 이유는 무엇인가?
  * 나는 Java뿐만 아니라 다른 언어에서 지금까지 코드를 짜면서 거의 대부분의 조건문을 if문으로 해결했다. (try/catch문이 더 어울리는 상황에서도...)물론 다른 사람의 코드를 참고하거나, 책을 보거나, 학교 수업을 따라갈 때는 간혹 try/catch문을 이용하기도 했다. 하지만 정작 try/catch문을 왜 꼭 써야 하는가에 대해서는 명확히 이유를 제시하지 못했다. Exception을 처리하기 위해서 try/catch문을 쓴다(?) 정도의 얄팍한 수준. 이번 글에서는 if문과 try/catch문의 차이에 대해서 알아보자.



### 예외 처리

* Try/Catch문을 사용하는 가장 큰 목적은 **예외 처리**를 하는 데 있다. 예외 처리(Exception Handling)이란 두 가지 방식으로 수행할 수 있는데, 첫번째가 전통적인 방식인 조건문을 이용하는 것이고, 두번째 방법이 try-catch문을 이용하는 것이다.

* **그렇다면 if문과 try-catch문은 무엇이 다른가?**

  * try-catch문에서는 예외가 발생했을 때 그 즉시 블록이 종료되고 catch 블록으로 제어가 이동한다. 하지만 if-else로 에러를 처리할 경우에는 에러가 발생한 객체에 대하여 수명이 유지되기 때문에 에러를 처리하는 동안에도 에러를 발생한 객체를 참조하는 코드가 정상적으로 컴파일되어 위험한 상황이 발생할 수 있는 것이다. 

  * 또한, try/catch문은 예외가 발생했을 때 "문제가 발생할 당시의 파라미터", "해당 예외에 대한 설명" 등을 전달해줌으로써 정보 전달의 기능도 할 수 있다. 쉽게 말해서 어디서 프로그램이 터진 것인지 쉽게 파악할 수 있는 것이다.

  * 그리고 무엇보다, 지금 우리는 **"에러 처리"가 아닌 "예외 처리"**를 하고 있음에 주목해야 한다. 에러는 프로그램 코드에 의해서 수습될 수 없는 오류가 나는 것이고, 예외는 프로그램 코드에 의해 수습될 수 있는 다소 미약한 오류라고 생각할 수 있다. 예외는 예외 처리를 통해 프로그램을 종료하지 않고 정상적으로 작동되게 만들어 줄 수 있다.

    

### try/catch문의 기본 구조

```java
try{
    예외가 생길 가능성이 있는 코드 작성
}catch(예외 발생 클래스명e){
    예외처리 코드
}finally...
```

* 구체적인 소스 코드를 한 번 보자.

  ```java
  public class Math{
      public static void main(String[] args){
          int num1, num2;
          Scanner sc = new Scanner(System.in); # import 생략
          num1 = sc.nextInt();
          num2 = sc.nextInt();
          
          try{
              System.out.println(num1/num2);
          }catch (Exception e){
              System.out.println("0으로 나눌 수 없습니다.");
        
          }
      }
  }
  ```

  * 위 코드에서 사용자가 num2에 0을 대입했을 때는 "0으로 나눌 수 없습니다."라는 메시지가 출력된다. 하지만 try-catch문이 없을 경우에는 ArithmeticException이라는 이름의 에러가 발생하게 된다. 이런식으로 직접적으로 어떤 error가 발생하는지 Exception의 클래스명을 알고 있다면 각각의 에러에 대하여 예외처리를 할 수 있게 되는 것이다.

  * 그렇게 되면 여러 에러가 발생할 가능성을 가지고 각각의 에러에 대한 예외처리 구문을 작성해 줄 수 있게 되고, 코드를 작성한 사람이나 다른 사람이 코드를 보았을 때 한번에 파악하기도 쉬워질 것이다.

    ```java
    public class Math{
        public static void main(String[] args){
            int num1, num2;
            Scanner sc = new Scanner(System.in); # import 생략
            num1 = sc.nextInt();
            num2 = sc.nextInt();
            
            try{
                System.out.println(num1/num2);
            }catch (ArithmeticException e){ # <- 이런 식으로 
                System.out.println("0으로 나눌 수 없습니다.");
            }
        }
    }
    ```

    
   
